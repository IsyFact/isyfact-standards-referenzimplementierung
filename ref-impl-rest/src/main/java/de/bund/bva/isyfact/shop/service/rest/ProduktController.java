package de.bund.bva.isyfact.shop.service.rest;

import de.bund.bva.isyfact.shop.core.ProduktVerwaltung;
import de.bund.bva.isyfact.shop.core.daten.ProduktBo;
import de.bund.bva.isyfact.shop.service.rest.mapper.ProduktModelMapper;
import de.bund.bva.isyfact.shop.service.rest.api.ProdukteApi;
import de.bund.bva.isyfact.shop.service.rest.exception.ProduktNotFoundException;
import de.bund.bva.isyfact.shop.service.rest.model.ProduktModel;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

/**
 * Controller class for the produkte resource.
 * All default methods of ProdukteApi get overwritten with:
 * - business logic
 * - specific exception, if thrown or none
 * - Security annotation, if necessary
 * (method signatures remain as being generated by OpenAPI)
 */

@RestController
public class ProduktController implements ProdukteApi {

    /**
     * This constructor injects the required dependencies.
     * @param produktVerwaltung ProduktVerwaltung
     */
    public ProduktController(ProduktVerwaltung produktVerwaltung) {
        this.produktVerwaltung = produktVerwaltung;
    }

    private final ProduktVerwaltung produktVerwaltung;

    /**
     * Searches for the product with a given id.
     * If no such product exists a ProduktNotFoundException is thrown.
     *
     * @param produktId internal id of wanted product
     * @return the ProduktModel with the given id
     * @throws ProduktNotFoundException â€“ if no such produkt exists
     */
    @Override
    public ResponseEntity<ProduktModel> getProduktById(
           @Parameter(name = "produktId", description = "ID of ProduktModel to return", required = true, in = ParameterIn.PATH)
           @PathVariable("produktId") Long produktId)
           throws ProduktNotFoundException {

            // retrieve ProduktBo
            ProduktBo produktBo = produktVerwaltung.getProduktById(produktId);
            // map business object to model
            ProduktModel produktModel = ProduktModelMapper.fromBo(produktBo);

            return new ResponseEntity<>(produktModel, HttpStatus.OK);
     }

    /**
     * Searches for products with a given name (name is not unique).
     * If no match is found, HttpStatus.NO_CONTENT is returned
     *
     * @param xRequestProduktName name of products to search for
     * @return list of ProduktBo found or HttpStatus.NO_CONTENT
     */
    @Override
    public ResponseEntity<List<ProduktModel>> findAllProdukteByName(
            @Parameter(name = "X-Request-ProduktName", description = "Name of the products to return", in = ParameterIn.HEADER) @RequestHeader(value = "X-Request-ProduktName", required = false) String xRequestProduktName,
            @Parameter(name = "limit", description = "The max. numbers of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    )  {

        // retrieve ProduktBos
        List<ProduktBo> produktBoList = produktVerwaltung.findAllProdukteByName(xRequestProduktName);

        if (produktBoList.isEmpty()) {
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        }
        // map business objects to models
        List<ProduktModel> ProduktModelList = ProduktModelMapper.fromBoList(produktBoList);

        return new ResponseEntity<>(ProduktModelList, HttpStatus.OK);
    }

    @Override
    // IsyFact Security: @Secured("PRIV_Recht_A")
    public ResponseEntity<ProduktModel> updateProdukt(
            @Parameter(name = "ProduktModel", description = "Update an existent product in the store", required = true) @Valid @RequestBody ProduktModel produktModel
    ) {

        // map given model to business object
        ProduktBo produktBo = ProduktModelMapper.toBo(produktModel);
        // update ProduktBo
        ProduktBo updatedProduktBo = produktVerwaltung.updateProdukt(produktBo);
        // map updated business object to model
        ProduktModel updatedProduktModel = ProduktModelMapper.fromBo(updatedProduktBo);

        return new ResponseEntity<>(updatedProduktModel, HttpStatus.OK);
    }

}
